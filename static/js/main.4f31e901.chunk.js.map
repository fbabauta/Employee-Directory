{"version":3,"sources":["components/Header/index.jsx","components/SearchBar/index.jsx","components/EmployeeTable/index.jsx","utils/API.js","components/Container/EmployeesContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBar","props","onSubmit","handleFormSubmit","value","name","onChange","handleInputChange","type","placeholder","EmployeeTable","scope","data-field","data-sortable","onClick","sortBy","state","filteredEmployees","map","employee","first","last","fullName","dob","formatDate","date","src","picture","thumbnail","alt","href","phone","email","login","uuid","axios","get","EmployeesContainer","search","employees","sortDirections","initialSortDirections","event","target","setState","toLowerCase","trim","preventDefault","key","primary","secondary","sortedEmployees","reverse","sort","a","b","localeCompare","input","filter","concat","includes","replace","Date","push","getMonth","slice","getDate","getFullYear","join","API","then","res","data","results","catch","err","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4f31e901.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1 className=\"text-center\">Employee Directory</h1>\r\n            <p className=\"text-center\">\r\n                Click on column headers to filter by heading or use the search box to narrow your results.\r\n            </p>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst SearchBar = (props) => {\n  // Setting the component's initial state\n\n  return (\n    <nav className=\"navbar navbar-light bg-light justify-content-center\">\n      <form className=\"form-inline m-2\" onSubmit={props.handleFormSubmit}>\n        <input\n          className=\"form-control\"\n          value={props.value}\n          name=\"search\"\n          onChange={props.handleInputChange}\n          type=\"search\"\n          placeholder=\"Search\"\n        />\n      </form>\n    </nav>\n  );\n};\n\nexport default SearchBar;","import React from \"react\";\nimport \"./style.css\"\n\nconst EmployeeTable = (props) => {\n  return (\n    <table className=\"table table-striped table-sortable text-center\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Image</th>\n          <th scope=\"col\" data-field=\"name\" data-sortable=\"true\">\n            <span onClick={() => props.sortBy(\"name\", \"last\", \"first\")}>\n              Name\n            </span>\n          </th>\n          <th scope=\"col\">\n            <span onClick={() => props.sortBy(\"phone\")}>Phone</span>\n          </th>\n          <th scope=\"col\">\n            <span onClick={() => props.sortBy(\"email\")}>Email</span>\n          </th>\n          <th scope=\"col\">\n            <span onClick={() => props.sortBy(\"dob\", \"date\")}>DOB</span>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.state.filteredEmployees.map((employee) => {\n          const { first, last } = employee.name;\n          const fullName = `${first} ${last}`;\n\n          // Format date\n          const dob = props.formatDate(employee.dob.date);\n\n          return (\n            <tr key={employee.login.uuid}>\n              <td>\n                <img src={employee.picture.thumbnail} alt={fullName} />\n              </td>\n              <td className=\"align-middle\">{fullName}</td>\n              <td className=\"align-middle\">\n              <a href={`tel:+1${employee.phone}`}>{employee.phone}</a></td>\n              <td className=\"align-middle email\">\n                <a href={`mailto:${employee.email}`}>{employee.email}</a>\n              </td>\n              <td className=\"align-middle\">{dob}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default EmployeeTable;","import axios from \"axios\";\n\nconst URL = \"https://randomuser.me/api/?results=50&nat=us\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    getEmployees: function() {\n        return axios.get(URL);\n    }\n}","import React, { Component } from 'react';\r\nimport SearchBar from '../SearchBar';\r\nimport EmployeeTable from '../EmployeeTable';\r\nimport API from '../../utils/API';\r\n\r\nclass EmployeesContainer extends Component {\r\n    state = {\r\n        search: \"\",\r\n        employees: [],\r\n        filteredEmployees: [],\r\n        sortDirections: this.initialSortDirections,\r\n    };\r\n\r\n    get initialSortDirections() {\r\n        return {\r\n            name: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            dob: \"\",\r\n        };\r\n    }\r\n\r\n    // When this component mounts, load random users as employees from https://randomuser.me/\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then((res) =>\r\n                this.setState({\r\n                    employees: res.data.results,\r\n                    filteredEmployees: res.data.results,\r\n                })\r\n            )\r\n            .catch((err) => console.log(err));\r\n    }\r\n\r\n    // Update search state to filter by employee name\r\n    handleInputChange = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({ search: value });\r\n        this.filteredEmployees(value.toLowerCase().trim());\r\n    };\r\n\r\n    handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    // Sort with the key of specified object\r\n    // If key has children, sort by primary child and optionally a secondary child. i.e. sort by last name, then first.\r\n    sortBy = (key, primary = 0, secondary = 0) => {\r\n        let sortedEmployees = this.state.filteredEmployees;\r\n        if (this.state.sortDirections[key]) {\r\n            this.setState({\r\n                filteredEmployees: sortedEmployees.reverse(),\r\n                sortDirections: {\r\n                    ...this.initialSortDirections,\r\n                    [key]: this.state.sortDirections[key] === \"asc\" ? \"desc\" : \"asc\",\r\n                },\r\n            });\r\n        } else {\r\n            sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\r\n                a = a[key];\r\n                b = b[key];\r\n\r\n                // If secondary comparison given and primary comparison is equal\r\n                // Example: Sorting by last name, if last names are equal, then sort that instance by first name instead.\r\n                if (primary) {\r\n                    if (secondary && a[primary] === b[primary]) {\r\n                        return a[secondary].localeCompare(b[secondary]);\r\n                    }\r\n                    return a[primary].localeCompare(b[primary]);\r\n                } else {\r\n                    return a.localeCompare(b);\r\n                }\r\n            });\r\n\r\n            this.setState({\r\n                filteredEmployees: sortedEmployees,\r\n                sortDirections: {\r\n                    ...this.initialSortDirections,\r\n                    [key]: \"asc\",\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    filteredEmployees = (input) => {\r\n        if (input) {\r\n            this.setState({\r\n                filteredEmployees: this.state.employees.filter((employee) => {\r\n                    return (\r\n                        employee.name.first\r\n                            .toLowerCase()\r\n                            .concat(\" \", employee.name.last.toLowerCase())\r\n                            .includes(input) ||\r\n                        employee.phone.includes(input) ||\r\n                        employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(input) ||\r\n                        employee.email.includes(input) ||\r\n                        this.formatDate(employee.dob.date).includes(input)\r\n                    );\r\n                }),\r\n            });\r\n        } else {\r\n            this.setState({ filteredEmployees: this.state.employees });\r\n        }\r\n    };\r\n\r\n    formatDate = (date) => {\r\n        date = new Date(date);\r\n        let dob = [];\r\n        dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\r\n        dob.push((\"0\" + date.getDate()).slice(-2));\r\n        dob.push(date.getFullYear());\r\n\r\n        // Join formatted date\r\n        return dob.join(\"-\");\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <SearchBar\r\n                    value={this.state.search}\r\n                    handleInputChange={this.handleInputChange}\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                />\r\n                <div className=\"container mt-4\">\r\n                    <EmployeeTable\r\n                        state={this.state}\r\n                        sortBy={this.sortBy}\r\n                        filteredEmployees={this.filteredEmployees}\r\n                        formatDate={this.formatDate}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmployeesContainer;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport EmployeesContainer from './components/Container/EmployeesContainer';\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <EmployeesContainer />\n    </>\n  );\n};\n   \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}